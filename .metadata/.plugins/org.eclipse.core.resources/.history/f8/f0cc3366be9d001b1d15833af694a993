package test;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

import net.sf.cglib.proxy.MethodInterceptor;

public class TestTwo {

    public static void main(String[] args) {
//        7、创建目标对象
        Teacher tea=new Teacher();
        
//        8、创建代理工厂对象并关联目标对象
        ProxyFactoryHandler factory=new ProxyFactoryHandler(tea);
        
//        9、通过工厂对象的getInstance的方法获取代理对象
        Person proxy=(Person)factory.getInstance();
        proxy.add(1, 3);
        proxy.work();
    }

}


class Teacher{//1、创建目标对象的类
    String teaname;
    Teacher(){}
    Teacher(String teaname){
        this.teaname=teaname;
    }
    public Integer add(Integer number1, Integer number2) {
        System.out.println("目标对象的add方法:"+number1+"+"+number2);
        return number1+number2;
    }
    public void work() {
        System.out.println("目标对象的work方法");
    }
}

//2、创建代理工厂类,实现MethodInterceptor接口
class CglibProxyFactory implements MethodInterceptor{
    private Object target;
    public CglibProxyFactory(Object target) {//4、通过构造方法关联目标对象
        this.target=target;
    }
    
//    5、实现invoke方法:代理对象的方法调用时,会调用invoke方法,进而来调用目标对象的方法
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        String methodName=method.getName();
        Object result=null;
        if(methodName.equals("add")) {
            System.out.println("代理对象的add方法:"+args[0]+"+"+args[1]+"="+((Integer)args[0]+(Integer)args[1]));
            result=method.invoke(target, args);
        }else {
            result=method.invoke(target, args);
            System.out.println("代理对象的work方法");
        }
        return result;
    }
    
//    6、创建一个方法,动态生成代理对象
    public Object getInstance() {
        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);
//        参数1：ClassLoader loader//目标对象的类加载器
//        参数2：Class<?>[] interfaces//目标对象实现的接口集合
//        参数3：InvocationHandler h//当前工厂对象
    }
}